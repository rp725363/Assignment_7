1. What is the name of the feature responsible for generating Regex objects?
Ans:-
The feature responsible for generating reguler expression (Rogex) object is called "Reguler expression pattern"

2. Why do raw strings often appear in Regex objects?
Ans:-
Raw string more oftenly used in regular expression objects beacuse reguler expression contains alot of backslashes 
which are specially used for a special purpose in regular exprassion , in regular python string. Each backslash must be escaped 
in order to represent a single backslash.This can make  regular srring diffecult to read and understand , while expression haveing multiple backslashes.

3. What is the return value of the search() method?
Ans:-
In reguler expression search() method returns the matched value anywhere in string ot "None" if there is no match in string .
Example as below:-
import re

string="this is my string rajendra"
pattern=r"rajendra"

match=re.search(pattern,string)

if match:
    print("Match found")
    print("Match text",match.group())
    print("start index",match.start())
    print("end index",match.end())
else:
    print("Not found")
    
    
    4. From a Match item, how do you get the actual strings that match the pattern?
Ans:-
Match basiclly used to matach a string or group of string in regular expression , and here group() method return string that matches
entire pattern.
For example:-
import re

string="this is rajendra pandey"

pattern="rajendra"

match=re.search(pattern,string)

if match:
    print("matched")
else:
    print("not found")
    
by running above code , you will end up getting details as below , here we found a pattern match in string .
output:-
matched

5. In the regex which created from the r'(\d\d\d)-(\d\d\d-\d\d\d\d)', what does group zero cover? Group 2? Group 1?
Ans:-
Here we can get the match found in digit by using match function in regular expression. examlpe as below.

import re

digit="334-453-5047"  #here we have to fill the digits in patter which we are supposed to match or we have to make a patter as per digit expression
pattern=r'(\d\d\d)-(\d\d\d-\d\d\d\d)'

match=re.search(digit,pattern)

if match:
     print(match.group(0))
     print(match.group(1))
     print(match.group(2))
 else:
     print("not found")

if this function fount your pattern or given data matched the output will be matched else it will give you not found error.

6. In standard expression syntax, parentheses and intervals have distinct meanings. How can you tell a regex that you want it to fit real parentheses and periods?
Ans:-
Here in regular expression , special charectors such as parenthess and periods have specific meaning, so to much parenthless and periods you need to escape them using
backslash charectors "\"

for example :
to match a parenthesis '(',use\'(
to match a litrel parenthsis ')',use'\)'
to match a litrel period '.'use'\.'.

so to match a string containing parentheses and periods you would write regular expression as below.

7. The findall() method returns a string list or a list of string tuples. What causes it to return one of the two options?
Ans:-
findall() in python returns list of string or list of tuples , depending on regular expression pattern used.

if regular expression pattern contains no capturing groups findall(), then it will return list of string .
import re
string="rajendra kumar pandey"
pattern="\w+"

result=re.findall(pattern,text)

print(result)

here while using no capturing group , we will find a list of string as output.
 
 If suppos regular exression pattern contains capturing groups findall() will return list of tuples.
 
 As example:-
 import re

text = "apple banana cherry"
pattern = "(\w+) (\w+)(\w+)"

result = re.findall(pattern, text)

print(result)
this will return a list of tuple as output.


8. In standard expressions, what does the | character mean?
Ans:-
In python language | used to for OR oprator , when it is used in python , it match expression values to left of expression value to right .
example as follows:-
below example will match to apple or banana
apple|banana

9. In regular expressions, what does the character stand for?
Ans:-  
In regular expression charector "." called dot or period waildcard and it represents any single charector accept newline
for example - 
in regular expression "c.t"- will match to "cat", "cot"  etc, but will not match to "c&t" beacuse dot will match newline it only matches to charector.

10.In regular expressions, what is the difference between the + and * characters?
Ans-
In reguler expression "+" and "*" both are quatifier that modify the behoivers of preceding pattern ,
main difference between "+" and "*" is "+" requires at least once occurence in preceing pattern while "*" requires zero or more occcurence 
to modify the preceding behaoiver

11. What is the difference between {4} and {4,5} in regular expression?
Ans;-
In the curly braces we represents the exact number of occurences in preceding pattern that should be matched,
the difference between {4} and {4,5} are as follows-
{4} represents that preceding pattern should match exact 4 occurences like "a{4}" = "aaaa"

and {4,5} represenrs of a range of pattern that can matched with preceding pattern in reguler expression like as below.
"a{4,5}" will matche to "aaaa" and "aaaaa" and will not match with "aaa" or "aaaaaaaa"

12. What do you mean by the \d, \w, and \s shorthand character classes signify in regular expressions?
Ans-
In reguler expression backslash followed by charectors userf to represents a shorthand charector classes that match the certain type of charectors
Here are \d, \w, \s are signify as below.
\d matches the digit charectors it is equivelent to (0-9)
\w matches to letter , digit and underscore , it is wquilevent to (A-Za-z0-9).
\s matches ths white space charectors such as space , tab or newline , it is equilevent to (\t\n\r\f\v).

this charectos make easy to us to write reguler expression that match the certain types of charecotrs.

13. What do means by \D, \W, and \S shorthand character classes signify in regular expressions?
Ans;-
In reguler expression charectors in capital letter use for negated version of lower case.
Here is what they signfy.
\D matches to any charectors which is not a digit , it is equilevent to {^0-9}
\W matched to any charector which is not word , i.e anythings other than letter , digits and underscore it is equilevent to [A-Za-z0-9]
\S matched to any charector that matches any charectos that is not whilespace  , it is equilevent to [^\t\n\r\f\v]
these negated charectos are usefull when you are when you want to match that are not certain types.

14. What is the difference between .*? and .*   ?
Ans:-
*? this pattern represents matches zero or more occurence in non-greedy way "?" makes makes quantifier "8" non-greedy.
it means it matches to few more charectors as possible to satisfy the overall pattern.

"*" reprents matches with zero or mre charectors in greedy way , without the question mark the quantifier is greedy , which means it match as many as charectos
are required to satisfy the overall pattern.


15. What is the syntax for matching both numbers and lowercase letters with a character class?
Ans:-
In reguler expression we basically use \d and \w to matches lower case letter with any charector class.
for example [a-z] this matches to all smallcase charectos and [0-9] this matches to disits
and \d\w is also represents [A-Za-z0-9].


16. What is the procedure for making a normal expression in regax case insensitive?
Ans:-
To make a reguler expression case insensitive we can use flag of modifier "!" that support mostly all programming language.
By adding this flag follwing by any reguler expression we regardsless of case of letter of charectors.


17. What does the . character normally match? What does it match if re.DOTALL is passed as 2nd argument in re.compile()?
Ans-
In regular expression "." matches any charechter accept newline ,   for example- in regular expression a.b , would match any string that has an "a" followed
by any single charector followed by "b".
how ever if we pass flag re.DOTALL() as second argument to re.compile() then the  "." charector will match any charector including newline, in this case 
regular exprssion (a.b) will match any string that has an 'a' followed by any charecter then followed by "b'.

import re

text = 'abc\n123'

regex1 = re.compile('a.b')
match1 = regex1.search(text)
print(match1.group())  # output: 'abc'

regex2 = re.compile('a.b', re.DOTALL)
match2 = regex2.search(text)
print(match2.group())  # output: 'abc\n1'

18. If numReg = re.compile(r'\d+'), what will numRegex.sub('X', '11 drummers, 10 pipers, five rings, 4 hen') return?
Ans:-Here substring 11,10 and 4 will be replaced by X , wihile 'five' will not be replaced beacuse it does not match to regular expression
resuls are as given below
X drummers,X pipers,five rings,X hen

19. What does passing re.VERBOSE as the 2nd argument to re.compile() allow to do?
Ans-
Paassing re.VERBOSE as second argument to re.compile() in python makes to write regular expression in more readable and maintenable format by ignoring the 
whitspace and comment inside the regular expression.

20. How would you write a regex that match a number with comma for every three digits? It must match the given following:
to match the number with comma after the digit we can use (^\d{1,3}(,\d{3})*$) as below:-
regex = re.compile(r'^\d{1,3}(,\d{3})*$')

strings = [
    '1',
    '10',
    '100',
    '1,000',
    '10,000',
    '100,000',
    '1,000,000',
    '10,000,000',
    '100,000,000',
    '1,00',
    '1234',
    '123,45,67',
    ',1000',
    '1,000,00',
    '1,00,000'
]

for string in strings:
    if regex.match(string):
        print(f"Matched: {string}")
    else:
        print(f"Not matched: {string}")
        
        
        
21. How would you write a regex that matches the full name of someone whose last name is Watanabe? You can assume that the first name that comes before 
it will always be one word that begins with a capital letter. The regex must match the following:
'Haruto Watanabe'
'Alice Watanabe'
'RoboCop Watanabe'
but not the following:
'haruto Watanabe' (where the first name is not capitalized)
'Mr. Watanabe' (where the preceding word has a nonletter character)
'Watanabe' (which has no first name)
'Haruto watanabe' (where Watanabe is not capitalized)

Ans:-
For that we can use ^[A-Z][a-z]+\sWatanabe$ to match as below code.

regex = re.compile(r'^[A-Z][a-z]+\sWatanabe$')

names = [
    'Ken Watanabe',
    'Tomomi Watanabe',
    'Mari Watanabe',
    'John Smith',
    'Amy Watanabe',
    'Watanabe',
    'Watanabe Ken',
    'ken Watanabe'
]

for name in names:
    if regex.match(name):
        print(f"Matched: {name}")
    else:
        print(f"Not matched: {name}")
        
        
22.How would you write a regex that matches a sentence where the first word is either Alice, Bob, or Carol; the second word is either eats, pets,
or throws; the third word is apples, cats, or baseballs; and the sentence ends with a period? This regex should be case-insensitive. It must match the following:
Ans:-
To match the whole sentance we can use ^(Alice|Bob|Carol)\s+(eats|pets|throws)\s+(apples|cats|baseballs)\.$ in code as below.
regex = re.compile(r'^(Alice|Bob|Carol)\s+(eats|pets|throws)\s+(apples|cats|baseballs)\.$', re.IGNORECASE)

sentences = [
    'Alice eats apples.',
    'Bob pets cats.',
    'Carol throws baseballs.',
    'alice eats apples.',
    'Bob  throws baseballs.',
    'CAROL pets CATS.',
    'Alice pets baseballs.',
    'David eats dogs.',
    'Alice eats.',
    'Bob pets the cats',
    'Carol throws apples'
]

for sentence in sentences:
    if regex.match(sentence):
        print(f"Matched: {sentence}")
    else:
        print(f"Not matched: {sentence}")











